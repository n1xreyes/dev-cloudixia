{
  "rules": {
    ".read": false,
    ".write": false,
  
      "users": {
        ".read": "root.child('admins').child(auth.uid).val() === true || data.child('userId').val() == auth.uid",
        "$user": {
          ".write": "auth.uid == $user || root.child('admins').child(auth.uid).val() === true",
          ".read": "auth.uid == $user || root.child('admins').child(auth.uid).val() === true",
            
          "userProfile": {
            ".read": true
          }
          
        }
      },

      "admins": {
        "$admin": {
          ".write": "root.child('admins').child(auth.uid).val() === true",
          ".read": "auth.uid == $admin || root.child('admins').child(auth.uid).val() === true"
        }
      },

      "listings": {
        ".read": "false",
        ".write": "root.child('admins').child(auth.uid).val() === true",
        ".indexOn": ["userId"],
        "$listing": {
          ".read": "true",
            
            //In an update, both the old & new data must be equal in values userId, uid to prevent injection
            // We just compare the values against each other.  If they are already in the collection, we can 
            // trust their values because an admin added them in
          ".write": "(data.child('userId').val() == newData.child('userId').val() && 
                    newData.child('uid').val() == data.child('uid').val()) 

                    // This is a simple update
                    || (!newData.exists() && data.child('userId').val() == auth.uid)"
        }
      },
        
      "pendingListings": {
        ".read": "true",
        ".write": "root.child('admins').child(auth.uid).val() === true",
        ".indexOn": ["userId"],
        "$listing": {
          ".read": "true",
            
            // Same base rules to prevent injections as "listings", with an extra check to make sure
            // Only an admin can change the "state" to something besides "PENDING"
          ".write": // Strictly covers inserts
          					"!data.exists() && newData.child('userId').val() == auth.uid && newData.child('state').val() == 'PENDING'
										
                    // Strictly covers updates
                    || (data.child('userId').val() == newData.child('userId').val() && 
                    newData.child('uid').val() == data.child('uid').val()) &&
                    newData.child('state').val() == 'PENDING'

                    // Strictly covers deletes
                    || (!newData.exists() && data.child('userId').val() == auth.uid)"
        }
      }
  }
}